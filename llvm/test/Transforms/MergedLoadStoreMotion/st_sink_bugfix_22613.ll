; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 3
; ModuleID = 'bug.c'
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; RUN: opt -O2 -S < %s | FileCheck %s

@d = common global i32 0, align 4
@b = common global i32 0, align 4
@f = common global [1 x [3 x i8]] zeroinitializer, align 1
@e = common global i32 0, align 4
@c = common global i32 0, align 4
@a = common global i32 0, align 4

; Function Attrs: nounwind uwtable
define void @fn1() {
; CHECK-LABEL: define void @fn1(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0:[0-9]+]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @b, align 4
; CHECK-NEXT:    [[IDXPROM1:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr @c, align 4
; CHECK-NEXT:    [[TOBOOL_NOT:%.*]] = icmp eq i32 [[TMP1]], 0
; CHECK-NEXT:    [[A_PROMOTED6:%.*]] = load i32, ptr @a, align 4
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds [1 x [3 x i8]], ptr @f, i64 0, i64 [[IDXPROM1]], i64 0
; CHECK-NEXT:    store i8 0, ptr [[ARRAYIDX2]], align 1
; CHECK-NEXT:    [[ARRAYIDX2_123:%.*]] = getelementptr inbounds [1 x [3 x i8]], ptr @f, i64 0, i64 [[IDXPROM1]], i64 1
; CHECK-NEXT:    store i8 0, ptr [[ARRAYIDX2_123]], align 1
; CHECK-NEXT:    tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(3) @f, i8 1, i64 3, i1 false)
; CHECK-NEXT:    br i1 [[TOBOOL_NOT]], label [[IF_END_2_1:%.*]], label [[IF_THEN_2_1:%.*]]
; CHECK:       if.then.2.1:
; CHECK-NEXT:    [[DEC_2_1:%.*]] = add nsw i32 [[A_PROMOTED6]], -6
; CHECK-NEXT:    store i32 [[DEC_2_1]], ptr @a, align 4
; CHECK-NEXT:    br label [[IF_END_2_1]]
; CHECK:       if.end.2.1:
; CHECK-NEXT:    store i32 2, ptr @d, align 4
; CHECK-NEXT:    store i32 3, ptr @e, align 4
; CHECK-NEXT:    ret void
;
entry:
  store i32 0, ptr @d, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc8, %entry
  %0 = load i32, ptr @d, align 4
  %cmp = icmp slt i32 %0, 2
  br i1 %cmp, label %for.body, label %for.end10

for.body:                                         ; preds = %for.cond
  %1 = load i32, ptr @d, align 4
  %idxprom = sext i32 %1 to i64
  %2 = load i32, ptr @b, align 4
  %idxprom1 = sext i32 %2 to i64
  %arrayidx = getelementptr inbounds [1 x [3 x i8]], ptr @f, i32 0, i64 %idxprom1
  %arrayidx2 = getelementptr inbounds [3 x i8], ptr %arrayidx, i32 0, i64 %idxprom
  store i8 0, ptr %arrayidx2, align 1
  store i32 0, ptr @e, align 4
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc, %for.body
  %3 = load i32, ptr @e, align 4
  %cmp4 = icmp slt i32 %3, 3
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond3
  %4 = load i32, ptr @c, align 4
  %tobool = icmp ne i32 %4, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body5
  %5 = load i32, ptr @a, align 4
  %dec = add nsw i32 %5, -1
  store i32 %dec, ptr @a, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body5
  %6 = load i32, ptr @e, align 4
  %idxprom6 = sext i32 %6 to i64
  %arrayidx7 = getelementptr inbounds [3 x i8], ptr @f, i32 0, i64 %idxprom6
  store i8 1, ptr %arrayidx7, align 1
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %7 = load i32, ptr @e, align 4
  %inc = add nsw i32 %7, 1
  store i32 %inc, ptr @e, align 4
  br label %for.cond3

for.end:                                          ; preds = %for.cond3
  br label %for.inc8

for.inc8:                                         ; preds = %for.end
  %8 = load i32, ptr @d, align 4
  %inc9 = add nsw i32 %8, 1
  store i32 %inc9, ptr @d, align 4
  br label %for.cond

for.end10:                                        ; preds = %for.cond
  ret void
}

; Function Attrs: nounwind uwtable
define i32 @main() {
; CHECK-LABEL: define i32 @main(
; CHECK-SAME: ) local_unnamed_addr #[[ATTR0]] {
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[TMP0:%.*]] = load i32, ptr @b, align 4
; CHECK-NEXT:    [[IDXPROM1_I:%.*]] = sext i32 [[TMP0]] to i64
; CHECK-NEXT:    [[TMP1:%.*]] = load i32, ptr @c, align 4
; CHECK-NEXT:    [[TOBOOL_NOT_I:%.*]] = icmp eq i32 [[TMP1]], 0
; CHECK-NEXT:    [[A_PROMOTED6_I:%.*]] = load i32, ptr @a, align 4
; CHECK-NEXT:    [[ARRAYIDX2_I:%.*]] = getelementptr inbounds [1 x [3 x i8]], ptr @f, i64 0, i64 [[IDXPROM1_I]], i64 0
; CHECK-NEXT:    store i8 0, ptr [[ARRAYIDX2_I]], align 1
; CHECK-NEXT:    [[ARRAYIDX2_123_I:%.*]] = getelementptr inbounds [1 x [3 x i8]], ptr @f, i64 0, i64 [[IDXPROM1_I]], i64 1
; CHECK-NEXT:    store i8 0, ptr [[ARRAYIDX2_123_I]], align 1
; CHECK-NEXT:    tail call void @llvm.memset.p0.i64(ptr noundef nonnull align 1 dereferenceable(3) @f, i8 1, i64 3, i1 false)
; CHECK-NEXT:    br i1 [[TOBOOL_NOT_I]], label [[IF_END:%.*]], label [[IF_THEN_2_1_I:%.*]]
; CHECK:       if.then.2.1.i:
; CHECK-NEXT:    [[DEC_2_1_I:%.*]] = add nsw i32 [[A_PROMOTED6_I]], -6
; CHECK-NEXT:    store i32 [[DEC_2_1_I]], ptr @a, align 4
; CHECK-NEXT:    br label [[IF_END]]
; CHECK:       if.end:
; CHECK-NEXT:    store i32 2, ptr @d, align 4
; CHECK-NEXT:    store i32 3, ptr @e, align 4
; CHECK-NEXT:    ret i32 0
;
entry:
  %retval = alloca i32, align 4
  store i32 0, ptr %retval
  call void @fn1()
  %0 = load i8, ptr getelementptr inbounds ([1 x [3 x i8]], ptr @f, i32 0, i64 0, i64 1), align 1
  %conv = sext i8 %0 to i32
  %cmp = icmp ne i32 %conv, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @abort()
  unreachable

if.end:                                           ; preds = %entry
  ret i32 0
}

; Function Attrs: noreturn nounwind
declare void @abort()
