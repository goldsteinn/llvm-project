; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py UTC_ARGS: --version 2
; RUN: llc < %s -mcpu=generic -mtriple=i686-pc-linux-gnu -relocation-model=pic -asm-verbose=false -post-RA-scheduler=false -verify-machineinstrs | FileCheck %s -check-prefixes=CHECK,CHECK-I686
; RUN: llc < %s -mcpu=generic -mtriple=x86_64-pc-linux-gnux32 -relocation-model=pic -asm-verbose=false -post-RA-scheduler=false -verify-machineinstrs | FileCheck %s -check-prefixes=CHECK,CHECK-X32
; RUN: llc < %s -mcpu=generic -mtriple=x86_64-pc-linux-gnux32 -relocation-model=pic -asm-verbose=false -post-RA-scheduler=false -fast-isel -verify-machineinstrs | FileCheck %s -check-prefixes=CHECK,CHECK-X32

@ptr = external global ptr
@dst = external global i32
@src = external global i32

define void @test0() nounwind {
entry:
    store ptr @dst, ptr @ptr
    %tmp.s = load i32, ptr @src
    store i32 %tmp.s, ptr @dst
    ret void

}

@ptr2 = global ptr null
@dst2 = global i32 0
@src2 = global i32 0

define void @test1() nounwind {
entry:
    store ptr @dst2, ptr @ptr2
    %tmp.s = load i32, ptr @src2
    store i32 %tmp.s, ptr @dst2
    ret void


}

declare ptr @malloc(i32)

define void @test2() nounwind {
entry:
    %ptr = call ptr @malloc(i32 40)
    ret void

}

@pfoo = external global ptr

define void @test3() nounwind {
entry:
    %tmp = call ptr(...) @afoo()
    store ptr %tmp, ptr @pfoo
    %tmp1 = load ptr, ptr @pfoo
    call void(...) %tmp1()
    ret void
}

declare ptr @afoo(...)

define void @test4() nounwind {
entry:
    call void(...) @foo()
    ret void

}

declare void @foo(...)


@ptr6 = internal global ptr null
@dst6 = internal global i32 0
@src6 = internal global i32 0

define void @test5() nounwind {
entry:
    store ptr @dst6, ptr @ptr6
    %tmp.s = load i32, ptr @src6
    store i32 %tmp.s, ptr @dst6
    ret void

}


;; Test constant pool references.
define double @test6(i32 %a.u) nounwind {
entry:
    %tmp = icmp eq i32 %a.u,0
    %retval = select i1 %tmp, double 4.561230e+02, double 1.234560e+02
    ret double %retval


}


;; Test jump table references.
define void @test7(i32 %n.u) nounwind {
entry:
    switch i32 %n.u, label %bb12 [i32 1, label %bb i32 2, label %bb6 i32 4, label %bb7 i32 5, label %bb8 i32 6, label %bb10 i32 7, label %bb1 i32 8, label %bb3 i32 9, label %bb4 i32 10, label %bb9 i32 11, label %bb2 i32 12, label %bb5 i32 13, label %bb11 ]
bb:
    tail call void(...) @foo1()
    ret void
bb1:
    tail call void(...) @foo2()
    ret void
bb2:
    tail call void(...) @foo6()
    ret void
bb3:
    tail call void(...) @foo3()
    ret void
bb4:
    tail call void(...) @foo4()
    ret void
bb5:
    tail call void(...) @foo5()
    ret void
bb6:
    tail call void(...) @foo1()
    ret void
bb7:
    tail call void(...) @foo2()
    ret void
bb8:
    tail call void(...) @foo6()
    ret void
bb9:
    tail call void(...) @foo3()
    ret void
bb10:
    tail call void(...) @foo4()
    ret void
bb11:
    tail call void(...) @foo5()
    ret void
bb12:
    tail call void(...) @foo6()
    ret void


}

declare void @foo1(...)
declare void @foo2(...)
declare void @foo6(...)
declare void @foo3(...)
declare void @foo4(...)
declare void @foo5(...)

;; Check TLS references
@tlsptrgd = thread_local global ptr null
@tlsdstgd = thread_local global i32 0
@tlssrcgd = thread_local global i32 0
@tlsptrld = thread_local(localdynamic) global ptr null
@tlsdstld = thread_local(localdynamic) global i32 0
@tlssrcld = thread_local(localdynamic) global i32 0
@tlsptrie = thread_local(initialexec) global ptr null
@tlsdstie = thread_local(initialexec) global i32 0
@tlssrcie = thread_local(initialexec) global i32 0
@tlsptrle = thread_local(localexec) global ptr null
@tlsdstle = thread_local(localexec) global i32 0
@tlssrcle = thread_local(localexec) global i32 0

define void @test8() nounwind {
entry:
    store ptr @tlsdstgd, ptr @tlsptrgd
    %tmp.s = load i32, ptr @tlssrcgd
    store i32 %tmp.s, ptr @tlsdstgd
    ret void

}

define void @test9() nounwind {
entry:
    store ptr @tlsdstld, ptr @tlsptrld
    %tmp.s = load i32, ptr @tlssrcld
    store i32 %tmp.s, ptr @tlsdstld
    ret void

}

define void @test10() nounwind {
entry:
    store ptr @tlsdstie, ptr @tlsptrie
    %tmp.s = load i32, ptr @tlssrcie
    store i32 %tmp.s, ptr @tlsdstie
    ret void

}

define void @test11() nounwind {
entry:
    store ptr @tlsdstle, ptr @tlsptrle
    %tmp.s = load i32, ptr @tlssrcle
    store i32 %tmp.s, ptr @tlsdstle
    ret void

}
;; NOTE: These prefixes are unused and the list is autogenerated. Do not add tests below this line:
; CHECK: {{.*}}
; CHECK-I686: {{.*}}
; CHECK-X32: {{.*}}
